rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Rules for estimate files
    match /estimates/{userId}/{fileName} {
      // Allow authenticated users to upload files to their own folder
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   // Validate file size (max 10MB)
                   request.resource.size <= 10 * 1024 * 1024 &&
                   // Validate file type (images and videos only)
                   (request.resource.contentType.matches('image/.*') ||
                    request.resource.contentType.matches('video/.*'));
      
      // Allow users to read their own files
      allow read: if request.auth != null && 
                 request.auth.uid == userId;
      
      // Allow users to delete their own files
      allow delete: if request.auth != null && 
                   request.auth.uid == userId;
    }
    
    // Rules for admin access to all estimate files
    match /estimates/{userId}/{fileName} {
      // Allow admin users to read all estimate files
      // Note: Admin verification should be handled in the client app
      // Storage rules cannot access Firestore for role checking
      allow read: if request.auth != null;
      
      // Allow admin users to delete any estimate files
      allow delete: if request.auth != null;
    }
    
    // Rules for profile photos
    match /profile-photos/{userId}/{fileName} {
      // Allow authenticated users to upload profile photos to their own folder
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   // Validate file size (max 5MB for profile photos)
                   request.resource.size <= 5 * 1024 * 1024 &&
                   // Validate file type (images only)
                   request.resource.contentType.matches('image/.*');
      
      // Allow users to read their own profile photos
      allow read: if request.auth != null && 
                 request.auth.uid == userId;
      
      // Allow users to update/replace their own profile photos
      allow update: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.size <= 5 * 1024 * 1024 &&
                   request.resource.contentType.matches('image/.*');
      
      // Allow users to delete their own profile photos
      allow delete: if request.auth != null && 
                   request.auth.uid == userId;
    }
    
    // Allow all authenticated users to read any profile photo (for displaying in UI)
    match /profile-photos/{userId}/{fileName} {
      allow read: if request.auth != null;
    }
    
    // Rules for payment receipts (Zelle, etc)
    match /payment-receipts/{userId}/{fileName} {
      // Allow authenticated users to upload receipts to their own folder
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   // Validate file size (max 5MB for receipts)
                   request.resource.size <= 5 * 1024 * 1024 &&
                   // Validate file type (images and PDFs)
                   (request.resource.contentType.matches('image/.*') ||
                    request.resource.contentType == 'application/pdf');
      
      // Allow users to read their own receipts
      allow read: if request.auth != null && 
                 request.auth.uid == userId;
      
      // Allow admins to read all receipts
      allow read: if request.auth != null;
      
      // Allow users to delete their own receipts
      allow delete: if request.auth != null && 
                   request.auth.uid == userId;
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
