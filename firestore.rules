rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Also allow users to read their own document by uid field (fallback)
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      
      // Allow creation of user documents 
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Appointments rules
    match /appointments/{appointmentId} {
      // ✅ AUTHENTICATED users can create appointments
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // ✅ GUEST users can create appointments (from web)
      allow create: if request.resource.data.userId == 'guest' &&
                   request.resource.data.userEmail != null &&
                   request.resource.data.isGuestBooking == true;
      
      // ✅ Authenticated users can read their own appointments
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // ✅ Authenticated users can read guest appointments with their email
      allow read: if request.auth != null && 
                 resource.data.userId == 'guest' &&
                 resource.data.userEmail == request.auth.email;
      
      // ✅ Admins can read all appointments
      allow read: if request.auth != null && 
                 getUserRole(request.auth.uid) == 'admin';
      
      // ✅ Allow authenticated users to read appointments for slot availability checking
      allow read: if request.auth != null;
      
      // ✅ Users can update their own pending/approved appointments (for cancellation/rescheduling)
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.userId &&
                   (resource.data.status == 'pending' || resource.data.status == 'approved');
      
      // ✅ Admins can update any appointment
      allow update: if request.auth != null && 
                   getUserRole(request.auth.uid) == 'admin';
      
      // ✅ Users can delete their own pending appointments (for cancellation)
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId &&
                   resource.data.status == 'pending';
      
      // ✅ Admins can delete any appointment
      allow delete: if request.auth != null && 
                   getUserRole(request.auth.uid) == 'admin';
    }
    
    // Support tickets rules
    match /tickets/{ticketId} {
      // Users can create their own tickets
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can read their own tickets
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // Admins can read, update, and delete all tickets
      allow read, update, delete: if request.auth != null && 
                                 getUserRole(request.auth.uid) == 'admin';
    }
    
    // Estimates rules
    match /estimates/{estimateId} {
      // Users can create their own estimates
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can read their own estimates
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // Users can update their own estimates (for editing details)
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
      
      // Users can delete their own estimates
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
      
      // Admins can read, update, and delete all estimates
      allow read, update, delete: if request.auth != null && 
                                 getUserRole(request.auth.uid) == 'admin';
    }
    
    // Blocked slots rules (for appointment availability checking)
    match /blockedSlots/{slotId} {
      // All authenticated users can read blocked slots to check availability
      allow read: if request.auth != null;
      
      // Only admins can create, update, or delete blocked slots
      allow create, update, delete: if request.auth != null && 
                                   getUserRole(request.auth.uid) == 'admin';
    }
    
    // Vehicles rules
    match /vehicles/{vehicleId} {
      // Allow authenticated users to create, read, update, and delete vehicles
      // For now, we'll be permissive to debug the issue
      allow read, write: if request.auth != null;
    }
    
    // Notifications rules
    match /notifications/{notificationId} {
      // Users can create notifications (for system-generated notifications)
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can read their own notifications
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // Users can update their own notifications (mark as read/unread)
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
      
      // Admins can create notifications for any user
      allow create: if request.auth != null && 
                   getUserRole(request.auth.uid) == 'admin';
      
      // Admins can read all notifications
      allow read: if request.auth != null && 
                 getUserRole(request.auth.uid) == 'admin';
    }

    // Email templates - only admins can read and write
    match /emailTemplates/{templateId} {
      allow read, write: if request.auth != null && 
        getUserRole(request.auth.uid) == 'admin';
      
      // Temporary: Allow authenticated users to read/write for debugging
      // Remove this line after confirming admin role works
      allow read, write: if request.auth != null;
    }

    
    // Helper function to get user role
    function getUserRole(uid) {
      let userDoc = get(/databases/$(database)/documents/users/$(uid));
      return userDoc != null && userDoc.data != null ? userDoc.data.role : 'client';
    }
  }
}
